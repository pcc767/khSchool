/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-07-20 06:42:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.kh.mvc.member.model.vo.Member;

public final class enroll_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/views/common/header.jsp", Long.valueOf(1658217562000L));
    _jspx_dependants.put("/views/common/footer.jsp", Long.valueOf(1658213228000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.kh.mvc.member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String path = request.getContextPath();
	String saveId = "";
	Member loginMember = (Member)session.getAttribute("loginMember");
	Cookie[] cookies = request.getCookies();
	
	if(cookies != null){
		for(Cookie c : cookies) { 
			if(c.getName().equals("saveId")){
				saveId = c.getValue();
				break;
			}
		}
	}

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!-- 헤더부 구현 할 기능 리스트 -->\r\n");
      out.write("<!-- 1. 로그인 공통부 기능 구현 -->\r\n");
      out.write("<!-- 2. 메뉴(네비게이션) 기능 작성 -->\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>KH 게시판</title>\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"");
      out.print(path);
      out.write("/resources/css/main.css\">\r\n");
      out.write("	<script src=\"");
      out.print(path);
      out.write("/resources/js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("	<h2>Hello MVC2 - Board!</h2>\r\n");
      out.write("	<div class=\"login-container\">\r\n");
      out.write("		");
if(loginMember == null){ 
      out.write("\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("			<form id=\"loginFrm\" action=\"");
      out.print(path);
      out.write("/login\" method=\"post\">\r\n");
      out.write("				<table>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"text\" name=\"userId\" id=\"userId\" value=\"");
      out.print(saveId );
      out.write("\" placeholder=\"아이디\" required/>\r\n");
      out.write("						</td>\r\n");
      out.write("						<td></td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"password\" name=\"userPwd\" id=\"userPwd\" placeholder=\"비밀번호\" required/>\r\n");
      out.write("						</td>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"submit\" value=\"로그인\">\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td colspan=\"2\">\r\n");
      out.write("							<label><input type=\"checkbox\" name=\"saveId\" ");
      out.print(saveId.length() == 0 ? "":"checked");
      out.write(" /> 아이디 저장</label>\r\n");
      out.write("							<input type=\"button\" value=\"회원가입\" onclick=\"location.href='");
      out.print(path);
      out.write("/member/enroll';\"/>\r\n");
      out.write("						</td>				\r\n");
      out.write("					</tr>\r\n");
      out.write("				</table>\r\n");
      out.write("			</form>\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("		");
} else { 
      out.write("\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("				<table>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td colspan =\"2\">\r\n");
      out.write("							");
      out.print(loginMember.getName() );
      out.write("님 안녕하세요?\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td><button onclick=\"location.href='");
      out.print(path);
      out.write("/member/view';\">내정보</button></td>\r\n");
      out.write("						<td><button onclick=\"location.href='");
      out.print(path);
      out.write("/logout';\">로그아웃</button></td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</table>\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("		");
} 
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<nav>\r\n");
      out.write("		<ul class=\"main-nav\">\r\n");
      out.write("			<li class=\"home\"><a href=\"");
      out.print(path);
      out.write("\">Home</a></li>		\r\n");
      out.write("			<li class=\"notice\"><a>공지사항</a></li>		\r\n");
      out.write("			<li class=\"board\"><a href=\"");
      out.print(path);
      out.write("/board/list\">게시판</a></li>		\r\n");
      out.write("			");
 if(loginMember != null && loginMember.getRole().equals("ROLE_ADMIN")){
      out.write("\r\n");
      out.write("				<li class=\"admin-member\"><a href=\"");
      out.print(path);
      out.write("/admin/member\">회원관리</a></li>		\r\n");
      out.write("			");
} 
      out.write("\r\n");
      out.write("		</ul>\r\n");
      out.write("	</nav>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<style>\r\n");
      out.write("    section #enroll-container {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("    section #enroll-container input {\r\n");
      out.write("        margin: 3px;\r\n");
      out.write("    }\r\n");
      out.write("    section #enroll-container table {\r\n");
      out.write("        margin: 0 auto;\r\n");
      out.write("    }\r\n");
      out.write("    section #enroll-container table th {\r\n");
      out.write("        padding: 0 10px;\r\n");
      out.write("        text-align: right;\r\n");
      out.write("    }\r\n");
      out.write("    section #enroll-container table td {\r\n");
      out.write("        padding: 0 10px;\r\n");
      out.write("        text-align: left;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<section id=\"content\">\r\n");
      out.write("	<h3 align=\"center\">회원 가입 정보</h3>\r\n");
      out.write("	<div id=\"enroll-container\">\r\n");
      out.write("		<form name=\"memberEnrollFrm\"\r\n");
      out.write("			action=\"");
      out.print(request.getContextPath());
      out.write("/member/enroll\" method=\"POST\">\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>아이디</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"text\" name=\"newId\" id=\"newId\" placeholder=\"아이디(4글자이상)\" required /> \r\n");
      out.write("						<input type=\"button\" id=\"checkDuplicate1\" value=\"중복검사1\" /> \r\n");
      out.write("						<input type=\"button\" id=\"checkDuplicate2\" value=\"중복검사2\" />\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>패스워드</th>\r\n");
      out.write("					<td><input type=\"password\" name=\"userPwd\" id=\"pass1\" required />\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>패스워드 확인</th>\r\n");
      out.write("					<td><input type=\"password\" id=\"pass2\" /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"userName\" required /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>휴대폰</th>\r\n");
      out.write("					<td><input type=\"tel\" name=\"phone\" maxlength=\"11\"\r\n");
      out.write("						placeholder=\"(-없이)01012345678\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이메일</th>\r\n");
      out.write("					<td><input type=\"email\" name=\"email\" placeholder=\"abc@abc.com\" />\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>주소</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"address\" /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>취미</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\"value=\"운동\" />운동</label> \r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"등산\" />등산</label> \r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"독서\" />독서</label>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"게임\" />게임</label>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"여행\" />여행</label>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("			<input type=\"submit\" id=\"enrollSubmit\" value=\"가입\" /> \r\n");
      out.write("			<input type=\"reset\" value=\"취소\" />\r\n");
      out.write("		</form>\r\n");
      out.write("		<form name=\"checkIdForm\">\r\n");
      out.write("			<input type=\"hidden\" name=\"userId\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<footer>\r\n");
      out.write("		<p>\r\n");
      out.write("			&lt;Copyright 2022. <strong>KH정보교육원</strong>.All rights reserved. &gt;\r\n");
      out.write("		</p>\r\n");
      out.write("	</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("	/*\r\n");
      out.write("	ES6에서 도입 함수형 언어 문법, Arrow Function 기법\r\n");
      out.write("	 -> ES6 주요 문법 : class(이미 해봄), 상속, 생성자 / 함수형 언어 문법 = 익명클래스\r\n");
      out.write("	 \r\n");
      out.write("	       기존 문법(ES5)    |     Arrow Function   \r\n");
      out.write("	  xx.(function(){...})	     xx.(()=>{...})   // 인자가 없는 경우\r\n");
      out.write("	  xx.(function(e){...})	    xx.((e)=>{...})   // 인자가 1개\r\n");
      out.write("	 xx.(function(x,y){...})   xx.((x,y)=>{...})   // 인자가 2개\r\n");
      out.write("	-----------------------------------------------------------------\r\n");
      out.write("	리턴값이 있는 경우\r\n");
      out.write("	 xx.(function(x,y){return x+y;}})   xx.((x,y)=>{return x+y})  \r\n");
      out.write("	 xx.(function(x,y){return x+y;}})   xx.((x,y)=> x + y;)  \r\n");
      out.write("	\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	// JQuery 고전문법\r\n");
      out.write("	/*	$(\"#checkDuplicate1\").click(function(){\r\n");
      out.write("	});\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	// 동기식=정적 페이지 요청을 통해 중복된 ID를 확인하는 방법 - 새로운 창을 통해 요청\r\n");
      out.write("	//  - 페이지를 새로고침 하지 않고 새로운 창(페이지)를 통해 회원가입 여부를 확인하는 방법\r\n");
      out.write("	$('#checkDuplicate1').click(()=>{\r\n");
      out.write("		let id = $('#newId').val().trim();\r\n");
      out.write("		\r\n");
      out.write("		if(id.length < 4){\r\n");
      out.write("			alert('아이디는 최소 4글자 입니다.');\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 동기식 확인하는 방법\r\n");
      out.write("		let url = '");
      out.print(request.getContextPath());
      out.write("/member/checkId';\r\n");
      out.write("		let title = 'duplicate';\r\n");
      out.write("		let status = 'left=500px,top=100px,width=500px,height=300px';\r\n");
      out.write("		\r\n");
      out.write("		open('',title,status); // 새로운 창으로 url을 로드하는 방법\r\n");
      out.write("		\r\n");
      out.write("//		checkIdForm : html에서 해당 네이밍으로 된 form이 존재함\r\n");
      out.write("		checkIdForm.target = title;\r\n");
      out.write("		checkIdForm.action = url;\r\n");
      out.write("		checkIdForm.method = 'post';\r\n");
      out.write("		checkIdForm.userId.value = id;\r\n");
      out.write("		checkIdForm.submit();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	// 동적 페이지(비동기식)으로 중복확인하는 방법 - AJAX ★★★★★\r\n");
      out.write("	// - 새로운 페이지를 요청하지 않고, 기존 페이지에서 서버에게 데이터만 전달 받아서 중복여부 확인 하는 방법\r\n");
      out.write("	$('#checkDuplicate2').click(()=>{\r\n");
      out.write("		let id = $('#newId').val().trim();\r\n");
      out.write("		\r\n");
      out.write("		if(id.length < 4){\r\n");
      out.write("			alert('아이디는 최소 4글자 입니다.');\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 비동기식 처리 - AJAX\r\n");
      out.write("		const xhr = new XMLHttpRequest();\r\n");
      out.write("		xhr.open('get','");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/member/checkId2?userId=' + id);\r\n");
      out.write("		\r\n");
      out.write("		// callback 함수 셋팅 = 이벤트 함수, 리스너, 핸들러\r\n");
      out.write("		xhr.onreadystatechange = ()=>{\r\n");
      out.write("			if(xhr.readyState == 4 && xhr.status == 200){\r\n");
      out.write("				// 결과값을 받아온 상태\r\n");
      out.write("				if(xhr.responseText == 'used'){\r\n");
      out.write("					alert('중복된 아이디입니다.');\r\n");
      out.write("					// html 코드를 변경하면 동적페이징 된다.\r\n");
      out.write("				}else{\r\n");
      out.write("					alert('입력된 아이디는 사용가능합니다.');\r\n");
      out.write("					// html 코드를 변경하면 동적페이징 된다.\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		xhr.send();\r\n");
      out.write("	});\r\n");
      out.write("\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
