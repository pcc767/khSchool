/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-07-13 11:37:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.directive;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/views/common/header.jsp", Long.valueOf(1657712215309L));
    _jspx_dependants.put("/views/common/footer.jsp", Long.valueOf(1657712215308L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" ");

 //	int value = 10 / 0;
 
      out.write("\r\n");
      out.write(" \r\n");
      out.write("<!-- Include 실습부\r\n");
      out.write(" 	■ Include 전략\r\n");
      out.write(" 	1. <html><head><css></head><body> 포함한 header 영역을 분리하고, </body></html>을 포함한 Footer로 작성함 ★★★★★\r\n");
      out.write(" 	2. JSP마다 html, body를 각자 선언하고, <header>부나 <footer>를 포함하는 방법\r\n");
      out.write(" 	※ 해당 파일이나 실습은 1번째 방법을 선호함\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>공통 헤더부입니다.</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
	// 로컬변수 영역
	String userName = "홍길동";
	String loginTime = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date());

      out.write("\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("	<h4 align=\"left\">");
      out.print(userName );
      out.write("님 로그인을 환영합니다. time : ");
      out.print(loginTime );
      out.write("</h4>\r\n");
      out.write("	<h1>My JSP Page</h1>\r\n");
      out.write("	<div align=\"left\">\r\n");
      out.write("		<a href=\"#\">메뉴1</a>\r\n");
      out.write("		<a href=\"#\">메뉴2</a>\r\n");
      out.write("		<a href=\"#\">메뉴3</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<section>\r\n");
      out.write("	<h4>개인 정보 입력</h4>\r\n");
      out.write("	<p>데이터 입력 후 확인 버튼을 눌러주세요.</p>\r\n");
      out.write("	<form action=\"userFormResult.jsp\" method=\"POST\">\r\n");
      out.write("		<label>이름 : <input type=\"text\" name=\"name\" size=\"10\"/></label><br>\r\n");
      out.write("		<label>나이 : <input type=\"text\" name=\"age\" size=\"10\"/></label><br>\r\n");
      out.write("		<label>성별 : </label> \r\n");
      out.write("		<label><input type=\"radio\" name=\"gender\" value=\"남자\"/>남자</label>\r\n");
      out.write("		<label><input type=\"radio\" name=\"gender\" value=\"여자\"/>여자</label><br>\r\n");
      out.write("		<label>키 : <input type=\"range\" name=\"height\" min=\"140\" max=\"190\" step=\"1\"/></label><br>\r\n");
      out.write("		\r\n");
      out.write("		<label>좋아하는 음식 : </label>\r\n");
      out.write("		<label><input type=\"checkbox\" name=\"food\" value=\"한식\"/>한식</label>\r\n");
      out.write("		<label><input type=\"checkbox\" name=\"food\" value=\"분식\"/>분식</label>\r\n");
      out.write("		<label><input type=\"checkbox\" name=\"food\" value=\"중식\"/>중식</label>\r\n");
      out.write("		<label><input type=\"checkbox\" name=\"food\" value=\"양식\"/>양식</label>\r\n");
      out.write("		<label><input type=\"checkbox\" name=\"food\" value=\"일식\"/>일식</label>\r\n");
      out.write("		<br><br>\r\n");
      out.write("		<input type=\"submit\" value=\"확인\">\r\n");
      out.write("		<input type=\"reset\" value=\"취소\">\r\n");
      out.write("	</form>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<h4 align=\"center\"> KH정보교육원, 02-1234-5678 </h4>\r\n");
      out.write("<br><br><br><br>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
